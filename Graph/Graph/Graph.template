template<class T>
Graph<T>::Graph(){
	vertexCount = 0;
	treeEdgeCount = 0;
}

template<class T>
Graph<T>::~Graph(){
	for (int i = 0; i < vertexCount; i++){
		delete[] adjacencyMatrix[i];
		delete[] edgeMarkedMatrix[i];
		delete[] edgeVisitedMatrix[i];
	}
	delete[] adjacencyMatrix;
	delete[] edgeMarkedMatrix;
	delete[] edgeVisitedMatrix;
}

template<class T>
void Graph<T>::SetupMatrices(){
	//First index should be source vertex, second should be destination vertex
	adjacencyMatrix = new int*[vertexCount];
	edgeMarkedMatrix = new bool*[vertexCount];
	edgeVisitedMatrix = new bool*[vertexCount];
	for (int i = 0; i < vertexCount; i++){
		adjacencyMatrix[i] = new int[vertexCount];
		edgeMarkedMatrix[i] = new bool[vertexCount];
		edgeVisitedMatrix[i] = new bool[vertexCount];
		for (int j = 0; j < vertexCount; j++){
			adjacencyMatrix[i][j] = 0;
			edgeMarkedMatrix[i][j] = false;
			edgeVisitedMatrix[i][j] = false;
		}
	}
}

template<class T>
void Graph<T>::LoadEdges(string filename){
	ifstream file;
	file.open(filename);
	if (file.fail()) {
		file.close();
		System::Windows::Forms::Application::Exit();
	}
	while (!file.eof()) {
		string n1, n2, w;
		file >> n1 >> n2 >> w;
		if (n1 != "" && n1 != "Vertex")
		{
			adjacencyMatrix[stoi(n1)][stoi(n2)] = stoi(w);
		}
	}
	file.close();
}

template<class T>
int Graph<T>::VertexCount() const{
	return vertexCount;
}

template<class T>
void Graph<T>::AddVertex(int index, T type){
	vertices[vertexCount].Set(index, type);
	vertexCount++;
}

template<class T>
Vertex<T> *Graph<T>::GetVertex(int index) {
	return &vertices[index];
}

template<class T>
int Graph<T>::GetEdgeWeight(int vertex1, int vertex2){
	return adjacencyMatrix[vertex1][vertex2];
}

template<class T>
bool Graph<T>::GetEdgeMarked(int vertex1, int vertex2){
	return edgeMarkedMatrix[vertex1][vertex2];
}

template<class T>
void Graph<T>::Prim(int vertex, System::Windows::Forms::ListBox::ObjectCollection ^&output){
	output->Add("Order:");
	output->Add("Start->End(Weight)");
	spanningTreeEdges.clear();
	treeEdgeCount = 0;
	if (vertices[vertex].IsMarked()){
		return;
	}
	vertices[vertex].Mark(true);
	//Add every edge connected to the vertex to the tree
	for (int i = 0; i < vertexCount; i++){
		if (adjacencyMatrix[vertex][i] != 0){

			Edge e;
			e.vertexIndex = vertex;
			e.DestVertexIndex = i;
			e.Weight = adjacencyMatrix[vertex][i];
			spanningTreeEdges.push_back(e);
			treeEdgeCount++;
		}
		if (adjacencyMatrix[i][vertex] != 0){

			Edge e;
			e.vertexIndex = i;
			e.DestVertexIndex = vertex;
			e.Weight = adjacencyMatrix[i][vertex];
			spanningTreeEdges.push_back(e);
			treeEdgeCount++;
		}
	}
	PrimStep(output);
}

template<class T>
void Graph<T>::PrimStep(System::Windows::Forms::ListBox::ObjectCollection ^&output){
	list<Edge>::iterator it;
	Edge *smallestEdge;
	Vertex<T> *v = nullptr;
	int min = 99999;
	for (it = spanningTreeEdges.begin(); it != spanningTreeEdges.end(); it++){
		v = &vertices[(*it).DestVertexIndex];
		if ((*it).Weight < min && !v->IsMarked()){
			min = (*it).Weight;
			smallestEdge = &(*it);
		}
	}
	if (min != 99999){
		v = &vertices[smallestEdge->DestVertexIndex];
		v->Mark(true);
		//Does nothing
		smallestEdge->Marked = true;
		edgeMarkedMatrix[smallestEdge->vertexIndex][smallestEdge->DestVertexIndex] = true;

		//Write to the output window
		output->Add(smallestEdge->vertexIndex.ToString() + "->" + smallestEdge->DestVertexIndex.ToString() + "(" + smallestEdge->Weight.ToString() + ")");

		//Add the edges connected to the vertex to the spanning tree
		for (int i = 0; i < vertexCount; i++){
			if (adjacencyMatrix[v->GetIndex()][i] != 0){
				Edge e;
				e.vertexIndex = v->GetIndex();
				e.DestVertexIndex = i;
				e.Weight = adjacencyMatrix[v->GetIndex()][i];
				spanningTreeEdges.push_back(e);
				treeEdgeCount++;
			}
			if (adjacencyMatrix[i][v->GetIndex()] != 0){
				Edge e;
				e.vertexIndex = i;
				e.DestVertexIndex = v->GetIndex();
				e.Weight = adjacencyMatrix[i][v->GetIndex()];
				spanningTreeEdges.push_back(e);
				treeEdgeCount++;
			}
		}
		PrimStep(output);
	}
	else{
		return;
	}
}

template<class T>
list<Edge> Graph<T>::GetSortedEdges(){
	list<Edge> l;
	for (int i = 0; i < vertexCount; i++){
		for (int j = 0; j < vertexCount; j++){
			if (adjacencyMatrix[i][j] == 0)
				continue;
			Edge e;
			e.vertexIndex = i;
			e.DestVertexIndex = j;
			e.Weight = adjacencyMatrix[i][j];
			l.push_back(e);
		}
	}
	l.sort();
	return l;
}

template<class T>
void Graph<T>::Kruskal(System::Windows::Forms::ListBox::ObjectCollection ^&output){
	output->Add("Order:");
	output->Add("Start->End(Weight)");
	//Make a list of all edges
	list<Edge> edges = GetSortedEdges();
	list<Edge>::iterator it;
	for (it = edges.begin(); it != edges.end(); it++){
		if (vertices[it->vertexIndex].IsMarked() && vertices[it->DestVertexIndex].IsMarked())
			continue;
		edgeMarkedMatrix[it->vertexIndex][it->DestVertexIndex] = true;
		it->Marked = true;
		bool result = false;

		HasCycle(&vertices[it->vertexIndex], result);

		if (result){
			it->Marked = false;
			edgeMarkedMatrix[it->vertexIndex][it->DestVertexIndex] = false;
		}
		if (it->Marked){
			edgeMarkedMatrix[it->vertexIndex][it->DestVertexIndex] = true;
			vertices[it->vertexIndex].Mark(true);
			vertices[it->DestVertexIndex].Mark(true);
			int src = it->vertexIndex;
			int dest = it->DestVertexIndex;
			int w = it->Weight;
			output->Add(src.ToString() + "->" + dest.ToString() + "(" + w.ToString() + ")");
		}
		//Required after calling HasCycle()
		VisitEntireGraph(false);
	}
}

template<class T>
void Graph<T>::HasCycle(Vertex<T> *vertex, bool &result) {
	if (vertex->IsVisited()){
		result = true;
		return;
	}
	vertex->Visit(true);
	for (int i = 0; i < vertexCount; i++){
		//Direction matters
		if (adjacencyMatrix[vertex->GetIndex()][i] != 0){
			if (!edgeVisitedMatrix[vertex->GetIndex()][i] && edgeMarkedMatrix[vertex->GetIndex()][i]){
				edgeVisitedMatrix[vertex->GetIndex()][i] = true;
				HasCycle(&vertices[i], result);
			}
		}
	}
}

template<class T>
void Graph<T>::Dijkstra(int start, int end){
	VisitEntireGraph(false);
	MarkEntireGraph(false);

	for (int i = 0; i < vertexCount; i++){
		vertices[i].SetDistance(99999);
	}

	bool result = false;
	for (int i = 0; i < vertexCount; i++){
		if (adjacencyMatrix[start][i] == 0)
			continue;
		vertices[i].SetDistance(adjacencyMatrix[start][i]);
		vertices[i].SetPrevVertex(start);
	}
	vertices[start].Visit(true);
	for (int i = 0; i < vertexCount; i++){
		if (adjacencyMatrix[start][i] == 0)
			continue;
		DijkstraStep(i, end, adjacencyMatrix[start][i], result);
	}


	//After completing the algorithm, mark the graph
	int index = end;
	while (index != start){
		vertices[index].Mark(true);
		edgeMarkedMatrix[vertices[index].GetPrevVertex()][index] = true;
		index = vertices[index].GetPrevVertex();
	}
	vertices[start].Mark(true);
}

//Do not need to sort edges by length
template<class T>
void Graph<T>::DijkstraStep(int vertex, int end, int currentDist, bool &success){
	//Safety
	if (vertices[vertex].IsVisited())
		return;

	if (vertex == end){
		success = true;
		return;
	}

	for (int i = 0; i < vertexCount; i++){
		if (adjacencyMatrix[vertex][i] == 0 || vertices[i].IsMarked())
			continue;
		if (vertices[i].GetDistance() > currentDist + adjacencyMatrix[vertex][i]){
			vertices[i].SetDistance(currentDist + adjacencyMatrix[vertex][i]);
			vertices[i].SetPrevVertex(vertex);
		}
	}
	vertices[vertex].Visit(true);
	for (int i = 0; i < vertexCount; i++){
		if (adjacencyMatrix[vertex][i] == 0)
			continue;
		DijkstraStep(i, end, currentDist + adjacencyMatrix[vertex][i], success);
	}
}

//Should go in order of lightest to heaviest edge
template<class T>
void Graph<T>::DepthFirstSearch(int vertex, String ^&result){
	if (vertices[vertex].IsVisited())
		return;

	list<Edge> edges;
	int edgeCount = 0;

	vertices[vertex].Visit(true);
	result += vertex.ToString() + " ";
	for (int i = 0; i < vertexCount; i++){
		if (adjacencyMatrix[vertex][i] != 0){
			Edge e;
			e.vertexIndex = vertex;
			e.DestVertexIndex = i;
			e.Weight = adjacencyMatrix[vertex][i];

			edges.push_back(e);
			edgeCount++;
		}
	}

	edges.sort();

	for (list<Edge>::iterator it = edges.begin(); it != edges.end(); it++){
		DepthFirstSearch(it->DestVertexIndex, result);
	}
}

template<class T>
void Graph<T>::BreadthFirstSearch(int vertex, String ^&result){
	if (vertices[vertex].IsVisited())
		return;

	list<Edge> edges;
	int edgeCount = 0;

	vertices[vertex].Visit(true);
	for (int i = 0; i < vertexCount; i++){
		if (adjacencyMatrix[vertex][i] != 0){
			if (!vertices[i].IsMarked()){
				//result += i.ToString() + " ";
				//vertices[i].Mark(true);
				Edge e;
				e.vertexIndex = vertex;
				e.DestVertexIndex = i;
				e.Weight = adjacencyMatrix[vertex][i];

				edges.push_back(e);
				edgeCount++;
			}
		}
	}

	edges.sort();

	for (list<Edge>::iterator it = edges.begin(); it != edges.end(); it++){
		result += it->DestVertexIndex.ToString() + " ";
		vertices[it->DestVertexIndex].Mark(true);
	}
	for (list<Edge>::iterator it = edges.begin(); it != edges.end(); it++){
		BreadthFirstSearch(it->DestVertexIndex, result);
	}
	/*
	for (int i = 0; i < vertexCount; i++){
		if (adjacencyMatrix[vertex][i] != 0)
			BreadthFirstSearch(i, result);
	}*/
}

template<class T>
string Graph<T>::GetEdgeWeights(){
	list<Edge> edges = GetSortedEdges();
	list<Edge>::iterator it;
	string str = "";
	for (it = edges.begin(); it != edges.end(); it++){
		str += to_string(it->Weight) + " ";
	}
	return str;
}

template<class T>
void Graph<T>::MarkEntireGraph(bool mark){
	for (int i = 0; i < vertexCount; i++){
		vertices[i].Mark(mark);
	}
	for (int i = 0; i < vertexCount; i++){
		for (int j = 0; j < vertexCount; j++){
			edgeMarkedMatrix[i][j] = false;
		}
	}
}

template<class T>
void Graph<T>::VisitEntireGraph(bool mark){
	for (int i = 0; i < vertexCount; i++){
		vertices[i].Visit(mark);
	}
	for (int i = 0; i < vertexCount; i++){
		for (int j = 0; j < vertexCount; j++){
			edgeVisitedMatrix[i][j] = false;
		}
	}
}

template<class T>
bool Graph<T>::CheckIsConnected() {
	bool connected = false;
	for (int i = 0; i < vertexCount; i++){
		connected = false;
		for (int j = 0; j < vertexCount; j++){
			if (adjacencyMatrix[i][j] != 0 || adjacencyMatrix[j][i] != 0){
				connected = true;
				continue;
			}
		}
		if (!connected)
			return false;
	}
	return true;
}